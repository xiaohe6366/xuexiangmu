import java.util.Random;

public class SelectionSort {
    
    /**
     * Sorts an array using the Selection Sort algorithm.
     * The algorithm iterates up to the second-to-last element (N-2),
     * finding the smallest unsorted element and swapping it with the current element.
     * 
     * @param values The array to be sorted.
     */
    public static void sort(int[] values) {
        int N = values.length;

        // Iterating over each element of the array, up to the second-to-last element
        for (int current = 0; current < N - 1; current++) {
            // Assuming the current index is the smallest element's index
            int minIndex = current;

            // Finding the index of the smallest element in the unsorted portion
            for (int j = current + 1; j < N; j++) {
                if (values[j] < values[minIndex]) {
                    minIndex = j;
                }
            }

            // Swapping the found smallest element with the current element
            int temp = values[current];
            values[current] = values[minIndex];
            values[minIndex] = temp;
        }
    }

    /**
     * Main method for testing the Selection Sort algorithm.
     * Generates 10,000 random values, sorts them, and measures the execution time.
     * 
     * @param args Command line arguments (not used).
     */
    public static void main(String[] args) {
        Random random = new Random();
        int[] array = new int[10000];

        // Generating 10,000 random values
        for (int i = 0; i < array.length; i++) {
            array[i] = random.nextInt(10000); // Random numbers between 0 and 9999
        }

        long startTime = System.nanoTime(); // Start time measurement

        sort(array); // Sorting the array

        long endTime = System.nanoTime(); // End time measurement

        // Calculating elapsed time in milliseconds
        long duration = (endTime - startTime) / 1000000;

        System.out.println("Execution time: " + duration + " ms");
    }
}
